#!/usr/bin/env python3
"""
Day Type Collection Spark Application - Functional Version

‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö Airflow DAG ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≤‡∏Å myhora.com
‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï day_type ‡πÄ‡∏Ç‡πâ‡∏≤ PostgreSQL features table

Based on: day_type_collecting_functional.py (working version)
Adapted for: Spark + Airflow environment
Purpose: Update day_type column for newly added MOT data (where day_type = -1)
"""

import psycopg2
import pandas as pd
import requests
import os
import time
from datetime import datetime, date, timedelta
import calendar
import sys
from typing import Optional, Dict, List, Any, Tuple

# Database configuration - Docker environment
DB_CONFIG = {
    "host": "postgres",  # Docker container name
    "port": 5432,
    "dbname": "airflow",
    "user": "airflow",
    "password": "airflow"
}

def get_day_type_null_dates_from_db() -> List[date]:
    """‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ day_type ‡πÄ‡∏õ‡πá‡∏ô -1 ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor()
        
        cur.execute("""
            SELECT feature_date 
            FROM features 
            WHERE day_type = -1 
            ORDER BY feature_date
        """)
        
        results = cur.fetchall()
        null_dates = [row[0] for row in results]
        
        cur.close()
        conn.close()
        
        print(f"üìÖ ‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• day_type: {len(null_dates)} ‡∏ß‡∏±‡∏ô")
        if null_dates:
            print(f"   ‡∏ä‡πà‡∏ß‡∏á: {null_dates[0]} ‡∏ñ‡∏∂‡∏á {null_dates[-1]}")
        
        return null_dates
        
    except Exception as e:
        print(f"‚ùå Error getting day_type null dates: {e}")
        return []

def download_holiday_calendar() -> Optional[pd.DataFrame]:
    """‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≤‡∏Å myhora.com"""
    
    current_year = datetime.now().year + 543  # Buddhist year
    download_url = f"https://www.myhora.com/calendar/ical/holiday.aspx?{current_year}.csv"
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÉ‡∏ô container
    folder = "/tmp/holiday_data"
    csv_filename = f'myhora-holiday-calendar-{current_year}.csv'
    
    if not os.path.exists(folder):
        os.makedirs(folder)
    
    csv_path = os.path.join(folder, csv_filename)
    
    print(f"üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ‡∏õ‡∏µ {current_year}")
    
    try:
        response = requests.get(download_url, timeout=30)
        response.raise_for_status()
        
        with open(csv_path, 'wb') as f:
            f.write(response.content)
        
        print(f"‚úÖ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {csv_path}")
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå
        holiday_df = pd.read_csv(csv_path, encoding='utf-8-sig')
        print(f"üìä ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î: {len(holiday_df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        if len(holiday_df) > 0:
            print(f"üìã ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {holiday_df.columns.tolist()}")
            print("üìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
            for _, row in holiday_df.head(3).iterrows():
                start_date = row.get('Start Date', 'N/A')
                summary = row.get('Summary', 'N/A')
                print(f"   {start_date}: {summary}")
        
        return holiday_df
        
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î: {e}")
        print("‚ö†Ô∏è ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        return pd.DataFrame(columns=['Start Date', 'Summary'])

def get_second_saturday(year: int, month: int) -> str:
    """‡∏´‡∏≤‡πÄ‡∏™‡∏≤‡∏£‡πå‡∏ó‡∏µ‡πà 2 ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡πá‡∏Å)"""
    cal = calendar.monthcalendar(year, month)
    
    # ‡∏´‡∏≤‡πÄ‡∏™‡∏≤‡∏£‡πå‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
    first_week = cal[0]
    if first_week[calendar.SATURDAY] != 0:
        # ‡πÄ‡∏™‡∏≤‡∏£‡πå‡πÅ‡∏£‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÅ‡∏£‡∏Å
        second_saturday = cal[1][calendar.SATURDAY]
    else:
        # ‡πÄ‡∏™‡∏≤‡∏£‡πå‡πÅ‡∏£‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
        second_saturday = cal[1][calendar.SATURDAY]
        if second_saturday == 0:
            second_saturday = cal[2][calendar.SATURDAY]
    
    return f"{year:04d}-{month:02d}-{second_saturday:02d}"

def get_festival_dates(year: int) -> Dict[str, str]:
    """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ"""
    
    second_sat_jan = get_second_saturday(year, 1)
    
    festivals = {
        "‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡πá‡∏Å": second_sat_jan,
        "‡∏ß‡∏≤‡πÄ‡∏•‡∏ô‡πÑ‡∏ó‡∏ô‡πå": f"{year}-02-14",
        "‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1": f"{year}-04-13",
        "‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 2": f"{year}-04-14", 
        "‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 3": f"{year}-04-15",
        "‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡πå‡∏°‡∏≤‡∏™‡∏≠‡∏µ‡∏ü": f"{year}-12-24",
        "‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡πå‡∏°‡∏≤‡∏™": f"{year}-12-25",
        "‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏õ‡∏µ": f"{year}-12-31",
    }
    
    print("üéâ ‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î:")
    for name, date in festivals.items():
        print(f"   {name}: {date}")
    
    return festivals

def classify_day_types(dates: List[date], holiday_df: pd.DataFrame) -> pd.DataFrame:
    """‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ß‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏"""
    
    if not dates:
        return pd.DataFrame()
    
    # ‡πÅ‡∏¢‡∏Å‡∏õ‡∏µ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    years = set(d.year for d in dates)
    
    print(f"üóìÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ß‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {len(dates)} ‡∏ß‡∏±‡∏ô")
    print(f"üìÖ ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°: {sorted(years)}")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á set ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î
    holiday_dates = set()
    if len(holiday_df) > 0 and 'Start Date' in holiday_df.columns:
        for _, row in holiday_df.iterrows():
            try:
                date_str = str(row['Start Date']).strip()
                if len(date_str) == 8:  # Format: 20250101
                    date_obj = datetime.strptime(date_str, '%Y%m%d')
                    holiday_dates.add(date_obj.strftime('%Y-%m-%d'))
                elif '-' in date_str:  # Format: 2025-01-01
                    date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                    holiday_dates.add(date_obj.strftime('%Y-%m-%d'))
            except Exception:
                continue
    
    print(f"üèñÔ∏è ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£: {len(holiday_dates)} ‡∏ß‡∏±‡∏ô")
    
    # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏õ‡∏µ
    festival_dates = set()
    for year in years:
        year_festivals = get_festival_dates(year)
        festival_dates.update(year_festivals.values())
    
    print(f"üéâ ‡∏ß‡∏±‡∏ô‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(festival_dates)} ‡∏ß‡∏±‡∏ô")
    
    # ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô
    day_type_data = []
    
    for date_obj in dates:
        date_str = date_obj.strftime('%Y-%m-%d')
        
        # ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î (0) > ‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏• (2) > ‡∏ß‡∏±‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ (1)
        if date_str in holiday_dates:
            day_type = 0
            day_category = "Holiday"
        elif date_str in festival_dates:
            day_type = 2
            day_category = "Festival"
        else:
            day_type = 1
            day_category = "Normal/Weekend"
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏°
        weekday = date_obj.strftime('%A')
        is_weekend = date_obj.weekday() >= 5  # Saturday=5, Sunday=6
        
        day_type_data.append({
            'feature_date': date_obj,
            'day_type': day_type,
            'day_category': day_category,
            'weekday': weekday,
            'is_weekend': is_weekend
        })
    
    result_df = pd.DataFrame(day_type_data)
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å
    print(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ß‡∏±‡∏ô:")
    if not result_df.empty:
        type_counts = result_df['day_category'].value_counts()
        for category, count in type_counts.items():
            day_type_num = result_df[result_df['day_category'] == category]['day_type'].iloc[0]
            print(f"   {category} (type {day_type_num}): {count} ‡∏ß‡∏±‡∏ô")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        print(f"\nüìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å:")
        for day_type in [0, 1, 2]:
            examples = result_df[result_df['day_type'] == day_type].head(2)
            if len(examples) > 0:
                category = examples.iloc[0]['day_category']
                print(f"   {category} (type {day_type}):")
                for _, row in examples.iterrows():
                    print(f"     {row['feature_date']} ({row['weekday']})")
    
    return result_df

def update_day_type_in_db(day_type_data: pd.DataFrame) -> bool:
    """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï day_type ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    if day_type_data is None or day_type_data.empty:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• day_type ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï")
        return False
    
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor()
        
        print(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï day_type ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {len(day_type_data)} ‡∏ß‡∏±‡∏ô...")
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        updated_count = 0
        for _, row in day_type_data.iterrows():
            feature_date = row['feature_date']
            day_type = int(row['day_type'])
            
            cur.execute("""
                UPDATE features 
                SET day_type = %s 
                WHERE feature_date = %s AND day_type = -1
            """, (day_type, feature_date))
            
            if cur.rowcount > 0:
                updated_count += 1
        
        conn.commit()
        cur.close()
        conn.close()
        
        print(f"‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï day_type ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {updated_count}/{len(day_type_data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        return True
        
    except Exception as e:
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï day_type: {e}")
        return False

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Airflow"""
    print("üìÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Day Type (Airflow Mode)")
    
    # ‡∏£‡∏±‡∏ö arguments ‡∏à‡∏≤‡∏Å Airflow (optional)
    if len(sys.argv) >= 4:
        postgres_db = sys.argv[1]  # ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ä‡πâ DB_CONFIG ‡πÅ‡∏ó‡∏ô
        postgres_user = sys.argv[2]
        postgres_pwd = sys.argv[3]
        print(f"üìä ‡∏£‡∏±‡∏ö arguments ‡∏à‡∏≤‡∏Å Airflow: db={postgres_db}, user={postgres_user}")
    else:
        print("üìä ‡∏£‡∏±‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î standalone")
    
    # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• day_type
    null_day_type_dates = get_day_type_null_dates_from_db()
    if not null_day_type_dates:
        print("‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï day_type")
        return True
    
    print(f"üìÖ ‡∏û‡∏ö {len(null_day_type_dates)} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• day_type")
    
    # 2. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
    holiday_df = download_holiday_calendar()
    
    # 3. ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ß‡∏±‡∏ô
    day_type_data = classify_day_types(null_day_type_dates, holiday_df)
    if day_type_data is None or day_type_data.empty:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ß‡∏±‡∏ô‡πÑ‡∏î‡πâ")
        return False
    
    # 4. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    success = update_day_type_in_db(day_type_data)
    
    if success:
        print("üéâ ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• day_type ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        print(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• day_type ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï:")
        print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô: {len(day_type_data)}")
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ß‡∏±‡∏ô
        type_counts = day_type_data['day_category'].value_counts()
        for category, count in type_counts.items():
            day_type_num = day_type_data[day_type_data['day_category'] == category]['day_type'].iloc[0]
            print(f"   - {category} (type {day_type_num}): {count} ‡∏ß‡∏±‡∏ô")
        
        # ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        special_days = day_type_data[day_type_data['day_type'].isin([0, 2])]
        if not special_days.empty:
            print(f"\nüéØ ‡∏ß‡∏±‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï:")
            for _, row in special_days.head(10).iterrows():
                print(f"   {row['feature_date']}: {row['day_category']} (type {row['day_type']})")
        
        return True
    else:
        print("‚ùå ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• day_type ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)